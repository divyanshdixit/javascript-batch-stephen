# workflow name:
name: Javascript-stephen-ci
#events those will triggred the workflow so jobs will run
on:
  push: 
    branches: [main]
  pull_request:
    branches: [main]
#jobs will run in workflow:
jobs:
  #name of the job
  first-job:
    runs-on: ubuntu-latest
    steps:
      - name: print hello
        run: echo "hello world"

  build-and-test:
    runs-on: ubuntu-latest
    # steps will execute in the job
    steps:
      # step 1: clone the code in vm's runner using checkout
      #name of the step
      - name: clone (checkout) the code in vm    
        uses: actions/checkout@v5.0.0

      # step 2: setup node js env
      - name: Setup Node js version
        uses: actions/setup-node@v5.0.0
        with:
            node-version: 20

      # step 3: install dependencies
      - name: Install depen
        if: ${{ hashFiles('package.json') != '' }}
        run: npm install

      # step 4: Run test if present
      - name: Run test
        if: ${{ hashFiles('package.json') != '' }}
        run: npm run test --if-present

      # step 5: make build 
      - name: make and run build of the project
        run: |
          if [ -f package.json ]; then
            echo "Found package.json, running build cmd..."
            npm run build
          else
            echo "Package.json not found, no need to build, it's plain js project."
          fi
          
  # push build to docker:
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: code checkout
        uses: actions/checkout@v5.0.0
      
      - name: login to docker hub
        uses: docker/login-action@v3
        with: 
          username:  ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_PASSWORD}}
          
      - name: set Docker image version
        run: |
          echo "IMAGE_TAG=v-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "Image tag is $IMAGE_TAG"

      - name: build docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:$IMAGE_TAG .
      
      - name: Push Docker image and latest tag also
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:$IMAGE_TAG
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:$IMAGE_TAG ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:latest

  # deploy to netlify:
  deploy-vps:
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:

      # Step 1: Install SSH client (Ubuntu runner already has it, optional)
      - name: Ensure SSH is available
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      # step2: Setup ssh key
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
      
      # step3: deploy via ssh
      - name: deploy docker container on vps
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
          echo "Stopping existing container if running..."
          docker stop js_test_app || true
          docker rm js_test_app || true

          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:${{ env.IMAGE_TAG }}

          echo "Starting new container..."
          docker run -d -p 80:80 --name stephen-js-app-${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/js_test_app:${{ env.IMAGE_TAG }}
          EOF